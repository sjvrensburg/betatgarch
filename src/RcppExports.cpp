// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cnstr
List cnstr(const Eigen::VectorXd y, const Eigen::VectorXd theta);
RcppExport SEXP _betatgarch_cnstr(SEXP ySEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(cnstr(y, theta));
    return rcpp_result_gen;
END_RCPP
}
// recursion_lst
List recursion_lst(const Eigen::VectorXd& y, const double f_0, const Eigen::VectorXd theta);
RcppExport SEXP _betatgarch_recursion_lst(SEXP ySEXP, SEXP f_0SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type f_0(f_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(recursion_lst(y, f_0, theta));
    return rcpp_result_gen;
END_RCPP
}
// nll
List nll(const Eigen::VectorXd y, const double f_0, const Eigen::VectorXd theta);
RcppExport SEXP _betatgarch_nll(SEXP ySEXP, SEXP f_0SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type f_0(f_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(nll(y, f_0, theta));
    return rcpp_result_gen;
END_RCPP
}
// simulate_lst
List simulate_lst(const Eigen::VectorXd& e, const double f_0, const Eigen::VectorXd theta);
RcppExport SEXP _betatgarch_simulate_lst(SEXP eSEXP, SEXP f_0SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const double >::type f_0(f_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_lst(e, f_0, theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_betatgarch_cnstr", (DL_FUNC) &_betatgarch_cnstr, 2},
    {"_betatgarch_recursion_lst", (DL_FUNC) &_betatgarch_recursion_lst, 3},
    {"_betatgarch_nll", (DL_FUNC) &_betatgarch_nll, 3},
    {"_betatgarch_simulate_lst", (DL_FUNC) &_betatgarch_simulate_lst, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_betatgarch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
